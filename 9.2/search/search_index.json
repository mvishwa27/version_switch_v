{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"#heading11","title":"Heading1.1","text":""},{"location":"EAS_NativeApp_Walk-through/","title":"EAS_NativeApp_Walk-through","text":"<p>User Guide: EAS App Implementation</p>"},{"location":"EAS_NativeApp_Walk-through/#walk-through-of-volt-mx-enterprise-app-store-eas-source-application","title":"Walk-through of Volt MX Enterprise App Store (EAS) Source Application","text":""},{"location":"EAS_NativeApp_Walk-through/#eas-app-implementation","title":"EAS App Implementation","text":"<p>Volt MX Enterprise App Store (EAS) is a simplified app distribution service that enables an enterprise to securely and easily distribute and manage apps to the users. All features of Volt MX EAS are available on Cloud and On-Premises. For more information on EAS, refer to VoltMX Enterprise App Store (EAS) Service for Digital App Distribution.</p> <p>From Volt MX AppPlatform V8 SP4 JuneFP onwards, Volt MX allows you to access the complete EAS App assets including the front-end project details and the back-end app. You can download the EAS App assets from the VoltMX Marketplace. These assets contain the source code of the Enterprise App Store, which is available for you to edit as per your requirement. You may choose to re-brand the app, or add specific forms to best suit your requirements.</p> <p>For example, you can brand some of the following use cases:</p> <ul> <li>Name, Slogan, Style</li> <li>Graphics: Logo, app icon, splash screen, and visual image of the app</li> <li> <p>Look of the app</p> </li> <li> <p>Brand keywords</p> </li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#app-architecture-under-volt-mx-reference-architecture","title":"App Architecture under Volt MX Reference Architecture","text":"<ul> <li>Volt MX Reference Architecture: Volt MX EAS App is built on the Volt MX Reference Architecture. Volt MX Reference Architecture encapsulates your app's code into Volt MX's implementation of the Model View Controller (MVC) software architecture. Under Volt MX Reference Architecture, the code for your app has a clear division between the domain objects that model the app's functional domain and the presentation objects that represent what the user sees on the screen. Therefore, domain objects work independently of the presentation objects and can support multiple presentations, even simultaneously. Both domain objects and presentation objects are encapsulated into specific modules that Volt MX Reference Architecture generates automatically for you from the user interface that you create in Volt MX Reference Architecture Iris. For more information on Volt MX Reference Architecture Reference Architecture, refer to A Deeper Look at Volt MX Reference Architecture Reference Architecture.</li> <li> <p>Extensibility and Customization: While Volt MX Reference Architecture EAS provide optimal functionality out of the box, HCL understands that each enterprise has unique requirements. The solutions can be easily extended to support business-specific applications and requirements by leveraging the power of the Volt MX platform. This allows customers to add their own functionality via third-party solutions or their own built-in modules on the Volt MX AppPlatform. For more information on Extensibility and Customization, refer to Extensibility.</p> <p>Volt MX EAS is built by using the industry-leading Volt MX Iris and Volt MX Foundry tools, which allow enterprises to customize and extend the following:</p> <ul> <li>Look and feel of the application</li> <li>Business rules that define the application functionality</li> <li>Rules around the data flow between the device and the back end</li> </ul> <p>Further, the solution includes an extension framework that allows implementation teams to do the following:</p> <ul> <li>Introduce a new form in an existing business workflow</li> <li>Replace an existing business logic method with new implementation</li> <li>Programmatically add new widgets to existing forms</li> <li>Update various properties of widgets</li> <li>Hide a feature that the bank does not need</li> </ul> </li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#prerequisites-to-configure-eas-source-app-in-iris","title":"Prerequisites to Configure EAS Source App in Iris","text":"<p>Before you start using the source of the EAS App, ensure you have access to the following:</p> <ul> <li>Access to a Volt MX Cloud account. If you do not have a cloud account, you can register for it at VoltMX Cloud Registration.</li> <li> <p>Access to a Volt MX Cloud Build Environment, Volt MX Iris Starter, and access to Foundry App Server for publishing apps to EAS. </p> <p>Click here for EAS and Platform Versions Compatibility Chart <p>The following table details the supported versions of EAS source and Platform.</p> <p>Important: If you are upgrading to EAS V 2.0.1 or a higher version, you must restart the server.</p> EAS Source App version Platform Supported Version Client App (Store.zip) Server App (Volt MX App Store.zip) Foundry \u00a0 Iris Middleware --- --- --- --- --- 1.0.0 <p>Features <p>Initial Release</p> <p>| 1.0.0 | NA | V8 SP4 FP44 or lower | 8.4.3.x. | | 1.1.0</p> <p> Features <p>Support for Web apps</p> <p>| 1.0.0 | NA | V8 SP4 FP44 or lower | 8.4.3.x. | | 2.0.0</p> <p> Features <p>Support for Android 10Support for iOS\u00a013Push Notifications</p> <p>| 2.0.0 | NA | V8 SP4 FP48 or higher | 8.4.3.x | | 2.0.1</p> <p> Features <p>Bug fixes</p> <p>| 2.0.1 | NA | V8 SP4 FP66 or higher. | 8.4.3.10 | | 3.0.1</p> <p> Features <p>Support for Desktop ViewHelp section in iOS\u00a0Native Apps</p> <p>| 3.0.1 | NA | V9 GA | 8.4.3.10 | | 3.1.0</p> <p> Features <p>Support for Upgrade Policy</p> <p>| 3.1.0 | NA | V9 SP1 | V9 SP1 | | SP:\u00a0Service PackFP: Fix Pack |||||</p> <p> </p> <li> <p>Configure the various Project Settings.</p> <ul> <li>Go to Project &gt; Settings and configure the build settings for each Native platform. For more information on Project Settings, click here.</li> </ul> </li> <li>Platform specific prerequisites:<ul> <li>If you choose to build an application for the iOS platform, you must provide the Mobile Provision, .P12, P12 password, and the Development method. To do so, go to Project Settings &gt; Native &gt; iPhone/iPad. For more details on the iOS configurations, click here.</li> <li>If you choose to build an application for the Android platform in Release mode, then the Android signing details are mandatory. To do so, go to Project Settings &gt; Native &gt; Android Mobile/Tablet. For more details on Android sign in details, click here.</li> </ul> </li> <li>If you choose to build an application in Protected mode, then setting the public and private keys is mandatory. To do so, go to Project Settings &gt; Protected Mode. For more details on how to generate public and private keys, click here.</li>"},{"location":"EAS_NativeApp_Walk-through/#downloading-eas-app-assets","title":"Downloading EAS App Assets","text":"<p>The EAS App assets are divided as follows:</p> <ul> <li><code>store.zip</code> is the front-end source app of the EAS.</li> <li><code>voltmx_app_store.zip</code>is the back-end source app of the EAS.</li> </ul> Store.zip Volt MX App Store.zip <code>store.zip</code>\u00a0is the Iris project created for EAS based on Volt MX Reference Architecture. The Store project contains the client app/front-end app details of the EAS App. It contains the details of the project layout, modules and forms, and the client-side code of the front-end app. The Store project is associated with the Volt MX App Store App for the linked services. <code>`voltmx_app_store.zip`</code> is the Server app containing the services linked to the EAS App."},{"location":"EAS_NativeApp_Walk-through/#downloading-front-end-project-for-eas-app-for-volt-mx-iris","title":"Downloading Front-end Project for EAS App for Volt MX Iris","text":"<p>Store\u00a0is the front-end project of the EAS created based on the Volt MX Reference Architecture. You can download the EAS App assets from VoltMX Marketplace. The store.zip app contains details such as forms for supported channels, splash screen, client-side code, and modules and forms of EAS.</p> <p>For Cloud, the Store app is bundled with the front-end and Server apps.</p> <ol> <li>Go to VoltMX Marketplace.</li> <li>Click Download. The <code>store.zip</code> file gets downloaded to your local system. For more details on EAS\u00a0versions, refer to EAS and Platform Versions Compatibility Chart.</li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#downloading-server-app-volt-mx-app-store-for-volt-mx-foundry","title":"Downloading Server App (Volt MX App Store) for Volt MX Foundry","text":"<p>MK The Volt MX App Store is the Server app (Volt MX Foundry), which contains services linked to EAS. You can download the source app (Volt MX App Store) from Marketplace.</p> <ol> <li>Go to Volt MX Marketplace.</li> <li>Click Download. The <code>voltmx_app_store.zip</code> file gets downloaded to your local system. For more details on EAS\u00a0versions, refer to EAS and Platform Versions Compatibility Chart.</li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#configuring-eas-app-in-iris","title":"Configuring EAS App in Iris","text":""},{"location":"EAS_NativeApp_Walk-through/#importing-eas-front-end-project-in-iris","title":"Importing EAS Front-End Project in Iris","text":"<p>You can view the layout of the front-end app and the source code by importing the Store project to Volt MX Iris.</p> <ol> <li>Make sure you are logged into Volt MX Iris.</li> <li> <p>From the Project menu, click Import &gt; Local Project &gt; Open as New Project.</p> <p></p> </li> <li> <p>In the Import dialog box, select Select archive files, and then click Browse to select the store.zip file that you have downloaded.</p> <p>The Store project gets imported to your Iris. You can view the layout of the EAS project.</p> </li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#importing-server-app-to-volt-mx-foundry","title":"Importing Server App to Volt MX Foundry","text":"<p>The Volt MX App Store app is available in your account in Volt MX Foundry by default. The app should be existing always in your account for EAS to work. The Volt MX App Store app is configured with the required services to be used in an app for EAS, for example, Identity Services.</p> <p>In case you want to import a different version of the app, you can re-import it from VoltMX Marketplace.</p> <ol> <li>Log in to Volt MX Foundry.</li> <li>In the Apps &gt; Foundry App, click IMPORT, and drag and drop or browse for the <code>voltmx_app_store_v1.0.zip</code> file to upload.</li> <li> <p>In the Open dialog, select the Volt MX App Store app that you downloaded.</p> <p>Important: Ensure the Volt MX App Store App must be published to Server before you build and publish the EAS App in Iris.</p> </li> <li> <p>Associate the Store project with the Server app. For more information, refer to How to Link EAS Front-End Project with Back-End App.</p> </li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#associating-front-end-project-with-server-app","title":"Associating Front-end Project with Server App","text":"<p>To publish your app to Volt MX Foundry, your Volt MX Iris client app must be associated with a Volt MX Foundry app. After you import the Store project in Iris, you must associate it with the Volt MX App Store App.</p> <ol> <li>In Volt MX Iris, sign in to your Volt MX Cloud account. To do so, from the top right corner of the Iris window, click Login. The Volt MX Account sign-in window opens. Enter your HCL Cloud email and password credentials, and then click Sign in.</li> <li>In Iris, open the Store project.</li> <li> <p>From the Data &amp; Services panel, click Open Foundry Console &gt; Use Existing or Link to Existing App. The list of pre-configured services appears.</p> <p></p> </li> <li> <p>In the Volt MX Foundry Applications, search for Volt MX App Store, and then click ASSOCIATE.</p> <p>The Volt MX App Store app is associated with the Store project.</p> <p></p> </li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#source-of-eas-app","title":"Source of EAS\u00a0App","text":""},{"location":"EAS_NativeApp_Walk-through/#structure-of-the-eas-front-end-project-store-project","title":"Structure of the EAS Front-end Project - Store Project","text":""},{"location":"EAS_NativeApp_Walk-through/#the-layout-of-the-front-end-app","title":"The Layout of the Front-End App","text":"<p>Volt MX EAS Source app is supported for Native channels: iOS and Android.</p> Elements in the Store Project Project Structure UI in Iris App Meta Data Store app name Default app icon These details are displayed based on the metadata of the app. Supported Channels in EAS Mobile Tablet Responsive Web/Desktop Forms and Controllers Forms (two modules) AuthModule frmForgotPassword frmLogin frmSplashScreen StoreModule StoreModules Channels ^^ frmAppDetails frmHelpScreen Mobile (for iOS only) &gt; Note: The frmStore screen contains the Help button for iOS devices only. When you click the Help button, the help is displayed in the frmHelpScreen for iOS mobile devices. And for iOS\u00a0tablets, the help is displayed in a pop-up window. frmStore Mobile Tablet Responsive Web/Desktop <p>Controllers</p> <ul> <li>AuthModule<ul> <li>frmForgotPasswordController</li> <li>frmForgotPasswordControllerActions</li> <li>frmLoginController</li> <li>frmLoginControllerActions</li> <li>frmSplashScreenController</li> <li>frmSplashScreenControllerActions</li> </ul> </li> <li>StoreModule<ul> <li>frmAppDetailsController</li> <li>frmAppDetailsControllerActions</li> <li>frmHelpScreenController</li> <li>frmHelpScreenControllerActions</li> <li>frmStoreController</li> <li>frmStoreControllerActions</li> </ul> </li> </ul> <p>|</p>"},{"location":"EAS_NativeApp_Walk-through/#supported-functionality-and-forms-eas-front-end-project","title":"Supported Functionality and Forms - EAS Front-End Project","text":"<ul> <li> <p>The <code>frmSplashScreen</code> form connects to the Server and fetches the login details of the Store app.</p> <ul> <li>If the Volt MX User Store custom auth type is enabled, the <code>frmLogin</code> form appears.</li> <li>If the OAuth 2.0 auth type is enabled, the login screen for that service provider type appears.</li> </ul> <p>The startup screen is displayed after the default splash screen.</p> <ul> <li>The <code>frmForgotPassword</code> form allows you to retrieve your login password for EAS.</li> <li>The <code>frmAppDetails</code> form displays the metadata of an app.</li> <li>If auth is not enabled, the <code>frmStore</code> form is displayed with the list of published apps.</li> </ul> <p>Note: For iOS apps, if the device displays the Untrusted Enterprise Developer pop-up message, you must trust your iOS certificates. The <code>frmStore</code> form displays with the Help button, which you can follow in your device to trust your iOS certificate. For more details, refer to Trust iOS Certificates.</p> </li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#reference-architecture-extensions","title":"Reference Architecture Extensions","text":"<ul> <li> <p>AuthModule supports end-user login.</p> <ul> <li>BusinessControllers: contains custom business logic for authentication for the complete Store project.</li> <li> <p>PresentationController: contains auth success and failure cases. Based on each case type, the required actions are called in the form Controllers. This is a common controller for all the supported channels.</p> <p>Important: For channel specific auth success and failure cases, you must use PresentationController_ to configure auth handles. <li> <p>StoreModule</p> <ul> <li>BusinessControllers: handles the fetching list of published apps, logic to download and launch apps; contains the list of apps and custom business logic for authentication for the complete Store project.</li> <li> <p>PresentationController: handles the presentation of apps such as in-progress status of app downloads, success, and failure cases. Based on each case type, the required actions are called in the form Controllers. You can add filters to customize the order of apps list. This is a common controller for all the supported channels.</p> <p>Important: For channel specific presentation of apps, you must use PresentationController_ to configure store handles."},{"location":"EAS_NativeApp_Walk-through/#source-details-of-eas-back-end-app-volt-mx-app-store-app","title":"Source Details of EAS Back-End App - Volt MX App Store App","text":"<p>The Volt MX App Store is the Server app (Volt MX Foundry), which contains the following services linked to EAS.</p> <ul> <li>Identity Services: By default, the AppStoreUserRepository Identity Service of User Repository type is configured to authenticate EAS. You can configure another service type, if required.</li> <li> <p>Objects Services: By default, the EASDownloadBinaryService Object Service of File Store type is configured to store binaries of all the published apps. You cannot modify this service.</p> <ul> <li>By default, the EASMetaServices Object Service of Store type is configured to store the metadata of all the published apps. You cannot modify this service.</li> </ul> </li> <li> <p>Contains uploaded app binaries to publish them to EAS.</p> </li> <li>Contains environments for Server and Volt MX App Server (EAS).</li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#branding-enterprise-app-store-to-your-requirements","title":"Branding Enterprise App Store to your Requirements","text":"<p>You can use the source app of the EAS to brand it to suit according to your business requirements.</p> <p>Volt MX allows developers to access complete suite of the EAS App source. You can view details of the source code of the app, structure, layout, forms, and functionality, and linked services, and can customize the brand according to business requirements as well.</p> <p>For example, you can brand an app for the following business requirements:</p> <ul> <li>Name, Slogan, Style</li> <li>Graphics: Logo, app icon, splash screen, and visual image of the app.</li> <li> <p>Look of the app</p> </li> <li> <p>Brand keywords</p> </li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#branding-eas-app-to-your-company-logo-and-splash-screen","title":"Branding EAS App to your Company Logo and Splash Screen","text":""},{"location":"EAS_NativeApp_Walk-through/#changing-an-app-icon","title":"Changing an App Icon","text":"<ol> <li>In Iris Project, click the Splash Screen.</li> <li>Click the Assets tab, right-click Media, and then click Resource Location.</li> <li>In the <code>..\\\\Store\\resources</code> folder, open common for the channel type, for example, mobile or tablet.</li> <li>Change the image file of the app icon. Ensure the file name is same as the existing one. For example, <code>icon.png</code>.</li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#replacing-image-for-the-existing-splash-screen","title":"Replacing Image for the existing Splash Screen","text":"<p>The splash screen and the frmSplashScreen can be same or different. You can modify the splash screen in the following two ways:</p> <p>To replace the existing splash screen, follow these steps:</p> <ol> <li>In Iris Project, click the Splash Screen.</li> <li>Click the Assets tab, right-click Media, and then click Resource Location.</li> <li>In the <code>..\\\\Store\\resources</code> folder, open common folder.</li> <li>Replace the new splash screen with the one existing. Ensure the file name is same as the existing one. By default, the image resource name is <code>`splash_eas.png`</code> for mobile and tablet. By default, the image resource name is <code>`splash_screen.png`</code> for responsive web.</li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#adding-new-image-to-splash-screen","title":"Adding New Image to Splash Screen","text":"<p>If you choose to add new image to splash screen, the new image name must be</p> <ol> <li>In Iris Project, click Splash Screen.</li> <li>Click the Assets tab, right-click Media, and then click Resource Location.</li> <li>In the <code>..\\\\Store\\resources</code> folder, open common folder.</li> <li>Add the new splash screen file to the common folder.</li> <li>Now, you must link the new image to the start-up screen in your store project as follows:<ol> <li>In Iris &gt; Store project, expand the channel type. For example, Mobile.</li> <li>Click Splash Screen.</li> <li>In Properties &gt;\u00a0Splash Screen &gt;\u00a0General, click Edit.</li> <li>In the Splash Image dialog box, select the new file.</li> </ol> </li> <li>Go to Forms &gt;\u00a0AuthModules &gt; frmSplashScreen, double-click the Splash Screen and select the new image file.</li> </ol> <p>Important: All images must be maintained with the default set scaling. </p>"},{"location":"EAS_NativeApp_Walk-through/#changing-the-eas-package-name","title":"Changing the EAS Package Name","text":"<p>If you want to build the EAS app with a custom Package Name and Bundle Identifier, you must configure the native settings in the Store project that you imported to Iris.</p> <ul> <li> <p>iOS</p> <ol> <li>Ensure that you imported the Store.zip app into Iris project.</li> <li>In Iris, open Project Settings.</li> <li>Open Project Settings, click Native.</li> </ol> <p></p> <ol> <li> <p>Click iPhone/iPad &gt; iOS\u00a0Build Settings &gt;\u00a0Bundle Identifier, change the package name.</p> <p>Important: The Bundle Identifier must match with the iOS\u00a0Certificates that you configured in the Store project. For more details, refer to Platform specific prerequisites.</p> </li> <li> <p>Click Done.</p> </li> </ol> </li> <li> <p>Android</p> <ol> <li>Ensure that you imported the Store.zip app into Iris project.</li> <li>In Iris, open Project Settings.</li> <li>In the Project Settings dialog, click the Native.</li> <li>Click *Android Mobile/Tablet*, and do the following:<ol> <li>Under General Settings &gt; Package Name, specify the desired package name.</li> <li>Under Manifest Permission, Tags and Gradle Build Entries, click the Tags tab.</li> <li>Under the <code>Child tag entries under &lt;application&gt; tag</code> text box, specify the same package name value for <code>android:authorities=\"&lt;package_name&gt;\"</code>.</li> </ol> </li> <li>Click Done.</li> </ol> <p></p> </li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#adding-contact-us-form-and-support-details","title":"Adding Contact Us Form and Support Details","text":"<p>You can add new forms to your EAS App as per your business requirements.</p> <p>For example, to add the Contact Us form to your EAS App and provide a link to the new form within the StoreModule &gt; fromStore form. The following steps details how to add a Contact Us form, provide contact details, and links to the form for a Mobile channel. In this example, you will be using the sample component: privacypreferences, which contains ready-to-use text placeholder and action buttons to navigate between forms.</p> <p>Important: While modifying the source app, ensure that you follow VoltMX Reference Architecture and Extensibility Guidelines lines to support product upgrades. </p> <ul> <li>Add new form to the project as follows:<ol> <li>In Iris, open the Store project, and ensure you are in the DESIGN mode.</li> <li>Click Store project &gt; Mobile, right-click Forms, and click New Group.</li> <li>Right-click the NewGroup and rename the new group to <code>ContactUS</code>.</li> <li>Right-click the ContactUS Group, and click New Form.</li> <li>Rename the new form to <code>frmContactUs</code>.</li> </ol> </li> <li>Download the Privacy Preferences (GDPR) component from Marketplace. To do so, click Marketplace menu &gt; Browse and search for Privacy Preferences (GDPR). Click Import to Collection Library.</li> <li> <p>Click <code>frmContactUs</code> form. From the downloaded components section, drag and drop the privacypreferences component to the <code>frmContactUs</code> form. The privacypreferences component is added to the form. You can change the caption, as follows:</p> </li> <li> <p>In Properties panel, click Component.</p> </li> <li>Change the ID to <code>ContactUsDetails</code>.</li> </ul> <p>Now, you will be modifying the actions and text in the component details section according to the your business requirement for the Contact Us form as shown in the following table.</p>"},{"location":"EAS_NativeApp_Walk-through/#supported-functionality-and-forms-eas-front-end-project_1","title":"Supported Functionality and Forms - EAS Front-End Project","text":"<p>The <code>frmSplashScreen</code> form connects to the Server and fetches the login details of the Store app. If the Volt MX User Store custom auth type is enabled, the <code>frmLogin</code> form appears. If the OAuth 2.0 auth type is enabled, the login screen for that service provider type appears. The startup screen is displayed after the default splash screen.The <code>frmForgotPassword</code> form allows you to retrieve your login password for EAS. The <code>frmAppDetails</code> form displays the metadata of an app. If auth is not enabled, the <code>frmStore</code> form is displayed with the list of published apps. &gt; Note: For iOS apps, if the device displays the Untrusted Enterprise Developer pop-up message, you must trust your iOS certificates. The <code>frmStore</code> form displays with the Help button, which you can follow in your device to trust your iOS certificate. For more details, refer to Trust iOS Certificates.</p>"},{"location":"EAS_NativeApp_Walk-through/#reference-architecture-extensions_1","title":"Reference Architecture Extensions","text":"<p>AuthModule supports end-user login.BusinessControllers: contains custom business logic for authentication for the complete Store project.PresentationController: contains auth success and failure cases. Based on each case type, the required actions are called in the form Controllers. This is a common controller for all the supported channels.&gt; Important: For channel specific auth success and failure cases, you must use PresentationController_ to configure auth handles. StoreModule BusinessControllers: handles the fetching list of published apps, logic to download and launch apps; contains the list of apps and custom business logic for authentication for the complete Store project. PresentationController: handles the presentation of apps such as in-progress status of app downloads, success, and failure cases. Based on each case type, the required actions are called in the form Controllers. You can add filters to customize the order of apps list. This is a common controller for all the supported channels.&gt; Important: For channel specific presentation of apps, you must use PresentationController_ to configure store handles."},{"location":"EAS_NativeApp_Walk-through/#source-details-of-eas-back-end-app-volt-mx-app-store-app_1","title":"Source Details of EAS Back-End App - Volt MX App Store App","text":"<p>The Volt MX App Store is the Server app (Volt MX Foundry), which contains the following services linked to EAS. Identity Services: By default, the AppStoreUserRepository Identity Service of User Repository type is configured to authenticate EAS. You can configure another service type, if required. Objects Services: By default, the EASDownloadBinaryService Object Service of File Store type is configured to store binaries of all the published apps. You cannot modify this service.By default, the EASMetaServices Object Service of Store type is configured to store the metadata of all the published apps. You cannot modify this service. Contains uploaded app binaries to publish them to EAS. Contains environments for Server and Volt MX App Server (EAS).</p>"},{"location":"EAS_NativeApp_Walk-through/#branding-enterprise-app-store-to-your-requirements_1","title":"Branding Enterprise App Store to your Requirements","text":"<p>You can use the source app of the EAS to brand it to suit according to your business requirements. Volt MX allows developers to access complete suite of the EAS App source. You can view details of the source code of the app, structure, layout, forms, and functionality, and linked services, and can customize the brand according to business requirements as well. For example, you can brand an app for the following business requirements: Name, Slogan, Style Graphics: Logo, app icon, splash screen, and visual image of the app. Look of the app Brand keywords</p>"},{"location":"EAS_NativeApp_Walk-through/#branding-eas-app-to-your-company-logo-and-splash-screen_1","title":"Branding EAS App to your Company Logo and Splash Screen","text":""},{"location":"EAS_NativeApp_Walk-through/#changing-an-app-icon_1","title":"Changing an App Icon","text":"<p>In Iris Project, click the Splash Screen. Click the Assets tab, right-click Media, and then click Resource Location. In the <code>..\\\\Store\\resources</code> folder, open common for the channel type, for example, mobile or tablet. Change the image file of the app icon. Ensure the file name is same as the existing one. For example, <code>icon.png</code>.</p>"},{"location":"EAS_NativeApp_Walk-through/#replacing-image-for-the-existing-splash-screen_1","title":"Replacing Image for the existing Splash Screen","text":"<p>The splash screen and the frmSplashScreen can be same or different. You can modify the splash screen in the following two ways: To replace the existing splash screen, follow these steps:</p> <p>In Iris Project, click the Splash Screen. Click the Assets tab, right-click Media, and then click Resource Location. In the <code>..\\\\Store\\resources</code> folder, open common folder. Replace the new splash screen with the one existing. Ensure the file name is same as the existing one. By default, the image resource name is <code>`splash_eas.png`</code> for mobile and tablet. By default, the image resource name is <code>`splash_screen.png`</code> for responsive web.</p>"},{"location":"EAS_NativeApp_Walk-through/#adding-new-image-to-splash-screen_1","title":"Adding New Image to Splash Screen","text":"<p>If you choose to add new image to splash screen, the new image name must be</p> <p>In Iris Project, click Splash Screen. Click the Assets tab, right-click Media, and then click Resource Location. In the <code>..\\\\Store\\resources</code> folder, open common folder. Add the new splash screen file to the common folder. Now, you must link the new image to the start-up screen in your store project as follows:</p> <p>In Iris &gt; Store project, expand the channel type. For example, Mobile.Click Splash Screen. In Properties &gt;\u00a0Splash Screen &gt;\u00a0General, click Edit.In the Splash Image dialog box, select the new file.</p> <p>Go to Forms &gt;\u00a0AuthModules &gt; frmSplashScreen, double-click the Splash Screen and select the new image file.</p> <p>Important: All images must be maintained with the default set scaling.</p>"},{"location":"EAS_NativeApp_Walk-through/#changing-the-eas-package-name_1","title":"Changing the EAS Package Name","text":"<p>If you want to build the EAS app with a custom Package Name and Bundle Identifier, you must configure the native settings in the Store project that you imported to Iris. iOS</p> <p>Ensure that you imported the Store.zip app into Iris project.In Iris, open Project Settings.Open Project Settings, click Native.Click iPhone/iPad &gt; iOS\u00a0Build Settings &gt;\u00a0Bundle Identifier, change the package name.&gt; Important: The Bundle Identifier must match with the iOS\u00a0Certificates that you configured in the Store project. For more details, refer to Platform specific prerequisites.Click Done.</p> <p>Android</p> <p>Ensure that you imported the Store.zip app into Iris project.In Iris, open Project Settings.In the Project Settings dialog, click the Native.Click *Android Mobile/Tablet*, and do the following:</p> <p>Under General Settings &gt; Package Name, specify the desired package name.Under Manifest Permission, Tags and Gradle Build Entries, click the Tags tab.Under the <code>Child tag entries under &lt;application&gt; tag</code> text box, specify the same package name value for <code>android:authorities=\"&lt;package_name&gt;\"</code>.</p> <p>Click Done.</p>"},{"location":"EAS_NativeApp_Walk-through/#adding-contact-us-form-and-support-details_1","title":"Adding Contact Us Form and Support Details","text":"<p>You can add new forms to your EAS App as per your business requirements. For example, to add the Contact Us form to your EAS App and provide a link to the new form within the StoreModule &gt; fromStore form. The following steps details how to add a Contact Us form, provide contact details, and links to the form for a Mobile channel. In this example, you will be using the sample component: privacypreferences, which contains ready-to-use text placeholder and action buttons to navigate between forms. &gt; Important: While modifying the source app, ensure that you follow VoltMX Reference Architecture and Extensibility Guidelines lines to support product upgrades. Add new form to the project as follows:</p> <p>In Iris, open the Store project, and ensure you are in the DESIGN mode.Click Store project &gt; Mobile, right-click Forms, and click New Group.\u00a0Right-click the NewGroup and rename the new group to <code>ContactUS</code>.Right-click the ContactUS Group, and click New Form.\u00a0Rename the new form to <code>frmContactUs</code>.</p> <p>Download the Privacy Preferences (GDPR) component from Marketplace. To do so, click Marketplace menu &gt; Browse and search for Privacy Preferences (GDPR). Click Import to Collection Library. Click <code>frmContactUs</code> form. From the downloaded components section, drag and drop the privacypreferences component to the <code>frmContactUs</code> form. The privacypreferences component is added to the form. You can change the caption, as follows:In Properties panel, click Component.Change the ID to <code>ContactUsDetails</code>.Now, you will be modifying the actions and text in the component details section according to the your business requirement for the Contact Us form as shown in the following table.</p>"},{"location":"EAS_NativeApp_Walk-through/#supported-functionality-and-forms-eas-front-end-project_2","title":"Supported Functionality and Forms - EAS Front-End Project","text":"<ul> <li> <p>The <code>frmSplashScreen</code> form connects to the Server and fetches the login details of the Store app.</p> <ul> <li>If the Volt MX User Store custom auth type is enabled, the <code>frmLogin</code> form appears.</li> <li>If the OAuth 2.0 auth type is enabled, the login screen for that service provider type appears.</li> </ul> <p>The startup screen is displayed after the default splash screen.</p> <ul> <li>The <code>frmForgotPassword</code> form allows you to retrieve your login password for EAS.</li> <li>The <code>frmAppDetails</code> form displays the metadata of an app.</li> <li>If auth is not enabled, the <code>frmStore</code> form is displayed with the list of published apps.</li> </ul> <p>Note: For iOS apps, if the device displays the Untrusted Enterprise Developer pop-up message, you must trust your iOS certificates. The <code>frmStore</code> form displays with the Help button, which you can follow in your device to trust your iOS certificate. For more details, refer to Trust iOS Certificates.</p> </li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#reference-architecture-extensions_2","title":"Reference Architecture Extensions","text":"<ul> <li> <p>AuthModule supports end-user login.</p> <ul> <li>BusinessControllers: contains custom business logic for authentication for the complete Store project.</li> <li> <p>PresentationController: contains auth success and failure cases. Based on each case type, the required actions are called in the form Controllers. This is a common controller for all the supported channels.</p> <p>Important: For channel specific auth success and failure cases, you must use PresentationController_ to configure auth handles. <li> <p>StoreModule</p> <ul> <li>BusinessControllers: handles the fetching list of published apps, logic to download and launch apps; contains the list of apps and custom business logic for authentication for the complete Store project.</li> <li> <p>PresentationController: handles the presentation of apps such as in-progress status of app downloads, success, and failure cases. Based on each case type, the required actions are called in the form Controllers. You can add filters to customize the order of apps list. This is a common controller for all the supported channels.</p> <p>Important: For channel specific presentation of apps, you must use PresentationController_ to configure store handles."},{"location":"EAS_NativeApp_Walk-through/#source-details-of-eas-back-end-app-volt-mx-app-store-app_2","title":"Source Details of EAS Back-End App - Volt MX App Store App","text":"<p>The Volt MX App Store is the Server app (Volt MX Foundry), which contains the following services linked to EAS.</p> <ul> <li>Identity Services: By default, the AppStoreUserRepository Identity Service of User Repository type is configured to authenticate EAS. You can configure another service type, if required.</li> <li> <p>Objects Services: By default, the EASDownloadBinaryService Object Service of File Store type is configured to store binaries of all the published apps. You cannot modify this service.</p> <ul> <li>By default, the EASMetaServices Object Service of Store type is configured to store the metadata of all the published apps. You cannot modify this service.</li> </ul> </li> <li> <p>Contains uploaded app binaries to publish them to EAS.</p> </li> <li>Contains environments for Server and Volt MX App Server (EAS).</li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#branding-enterprise-app-store-to-your-requirements_2","title":"Branding Enterprise App Store to your Requirements","text":"<p>You can use the source app of the EAS to brand it to suit according to your business requirements.</p> <p>Volt MX allows developers to access complete suite of the EAS App source. You can view details of the source code of the app, structure, layout, forms, and functionality, and linked services, and can customize the brand according to business requirements as well.</p> <p>For example, you can brand an app for the following business requirements:</p> <ul> <li>Name, Slogan, Style</li> <li>Graphics: Logo, app icon, splash screen, and visual image of the app.</li> <li> <p>Look of the app</p> </li> <li> <p>Brand keywords</p> </li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#branding-eas-app-to-your-company-logo-and-splash-screen_2","title":"Branding EAS App to your Company Logo and Splash Screen","text":""},{"location":"EAS_NativeApp_Walk-through/#changing-an-app-icon_2","title":"Changing an App Icon","text":"<ol> <li>In Iris Project, click the Splash Screen.</li> <li>Click the Assets tab, right-click Media, and then click Resource Location.</li> <li>In the <code>..\\\\Store\\resources</code> folder, open common for the channel type, for example, mobile or tablet.</li> <li>Change the image file of the app icon. Ensure the file name is same as the existing one. For example, <code>icon.png</code>.</li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#replacing-image-for-the-existing-splash-screen_2","title":"Replacing Image for the existing Splash Screen","text":"<p>The splash screen and the frmSplashScreen can be same or different. You can modify the splash screen in the following two ways:</p> <p>To replace the existing splash screen, follow these steps:</p> <ol> <li>In Iris Project, click the Splash Screen.</li> <li>Click the Assets tab, right-click Media, and then click Resource Location.</li> <li>In the <code>..\\\\Store\\resources</code> folder, open common folder.</li> <li>Replace the new splash screen with the one existing. Ensure the file name is same as the existing one. By default, the image resource name is <code>`splash_eas.png`</code> for mobile and tablet. By default, the image resource name is <code>`splash_screen.png`</code> for responsive web.</li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#adding-new-image-to-splash-screen_2","title":"Adding New Image to Splash Screen","text":"<p>If you choose to add new image to splash screen, the new image name must be</p> <ol> <li>In Iris Project, click Splash Screen.</li> <li>Click the Assets tab, right-click Media, and then click Resource Location.</li> <li>In the <code>..\\\\Store\\resources</code> folder, open common folder.</li> <li>Add the new splash screen file to the common folder.</li> <li>Now, you must link the new image to the start-up screen in your store project as follows:<ol> <li>In Iris &gt; Store project, expand the channel type. For example, Mobile.</li> <li>Click Splash Screen.</li> <li>In Properties &gt;\u00a0Splash Screen &gt;\u00a0General, click Edit.</li> <li>In the Splash Image dialog box, select the new file.</li> </ol> </li> <li>Go to Forms &gt;\u00a0AuthModules &gt; frmSplashScreen, double-click the Splash Screen and select the new image file.</li> </ol> <p>Important: All images must be maintained with the default set scaling.</p>"},{"location":"EAS_NativeApp_Walk-through/#changing-the-eas-package-name_2","title":"Changing the EAS Package Name","text":"<p>If you want to build the EAS app with a custom Package Name and Bundle Identifier, you must configure the native settings in the Store project that you imported to Iris.</p> <ul> <li> <p>iOS</p> <ol> <li>Ensure that you imported the Store.zip app into Iris project.</li> <li>In Iris, open Project Settings.</li> <li> <p>Open Project Settings, click Native.</p> <p></p> </li> <li> <p>Click iPhone/iPad &gt; iOS\u00a0Build Settings &gt;\u00a0Bundle Identifier, change the package name.</p> <p>Important: The Bundle Identifier must match with the iOS\u00a0Certificates that you configured in the Store project. For more details, refer to Platform specific prerequisites.</p> </li> <li> <p>Click Done.</p> </li> <li>Android</li> <li>Ensure that you imported the Store.zip app into Iris project.</li> <li>In Iris, open Project Settings.</li> <li>In the Project Settings dialog, click the Native.</li> <li>Click *Android Mobile/Tablet*, and do the following:<ol> <li>Under General Settings &gt; Package Name, specify the desired package name.</li> <li>Under Manifest Permission, Tags and Gradle Build Entries, click the Tags tab.</li> <li>Under the <code>Child tag entries under &lt;application&gt; tag</code> text box, specify the same package name value for <code>android:authorities=\"&lt;package_name&gt;\"</code>.</li> </ol> </li> <li> <p>Click Done.</p> <p></p> </li> </ol> </li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#adding-contact-us-form-and-support-details_2","title":"Adding Contact Us Form and Support Details","text":"<p>You can add new forms to your EAS App as per your business requirements.</p> <p>For example, to add the Contact Us form to your EAS App and provide a link to the new form within the StoreModule &gt; fromStore form. The following steps details how to add a Contact Us form, provide contact details, and links to the form for a Mobile channel. In this example, you will be using the sample component: privacypreferences, which contains ready-to-use text placeholder and action buttons to navigate between forms.</p> <p>Important: While modifying the source app, ensure that you follow VoltMX Reference Architecture and Extensibility Guidelines lines to support product upgrades.</p> <ol> <li>Add new form to the project as follows:<ol> <li>In Iris, open the Store project, and ensure you are in the DESIGN mode.</li> <li>Click Store project &gt; Mobile, right-click Forms, and click New Group.</li> <li>Right-click the NewGroup and rename the new group to <code>ContactUS</code>.</li> <li>Right-click the ContactUS Group, and click New Form.</li> <li>Rename the new form to <code>frmContactUs</code>.</li> </ol> </li> <li>Download the Privacy Preferences (GDPR) component from Marketplace. To do so, click Marketplace menu &gt; Browse and search for Privacy Preferences (GDPR). Click Import to Collection Library.</li> <li>Click <code>frmContactUs</code> form.</li> <li> <p>From the downloaded components section, drag and drop the privacypreferences component to the <code>frmContactUs</code> form. The privacypreferences component is added to the form. You can change the caption, as follows:</p> <ul> <li>In Properties panel, click Component.</li> <li>Change the ID to <code>ContactUsDetails</code>.</li> </ul> <p>Now, you will be modifying the actions and text in the component details section according to the your business requirement for the Contact Us form as shown in the following table.</p> Default text and actions in the Component Modified details in the Component sectionfor the Contact Us form </li> <li> <p>Click <code>ContactUsDetails</code> to edit component properties.</p> <ol> <li> <p>In Properties &gt; Component, do the following:</p> <ol> <li>In Header Text, change the text to <code>Contact Us</code>.</li> <li> <p>In Message, specify the contact details.</p> <p>For example, Volt MX Support URL: <code>&lt;p&gt;We welcome your feedback on our documentation. &lt;br&gt;&lt;br&gt;&lt;a href=\"https://techpubs@voltmx.com/\"&gt;Click here to write to us at&lt;/a&gt;.&lt;br&gt;&lt;br&gt;\\n&lt;a href=\"https://support@voltmx.com/\"&gt;For technical questions, suggestions, and comments, or to report problems on Volt MX product line, click here.&lt;/a&gt;\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\u200b\\n&lt;/p&gt;</code></p> </li> </ol> </li> <li> <p>To add the link to the OK button, do the following:</p> <ol> <li>On Properties, click Action.</li> <li>From onRightButtonClick, click the Edit button.</li> <li>From Action ID &gt;\u00a0Navigation, click Navigate to Form.</li> <li>Click the <code>Navigate to Form &lt;Form Name&gt;</code> element.</li> <li> <p>Click <code>frmStore</code>. By doing this, when you click the OK button on the Contact Us form, the <code>frmStore</code> form appears.</p> <p></p> </li> </ol> </li> <li> <p>For the Contact Us form, you do not need any action for the No button. So, you can hide the button by removing the text, as follows:</p> <ol> <li>From Properties panel, click Component.</li> <li>In Left Button Text field, delete the caption.</li> </ol> </li> <li>Now, add the link to the new button widget in the frmStore form to navigate to the Contact Us form.</li> <li>Select the <code>frmStore</code> form.</li> <li> <p>From Iris &gt; Default Library, drag and drop the Button widget to the form.</p> <p>You can change the button properties such as skin and text.</p> </li> <li> <p>On Properties, click Action.</p> </li> <li>From onClick, click the Edit button.</li> <li>From Action ID &gt;\u00a0Navigation, click Navigate to Form.</li> <li>Click the <code>Navigate to Form &lt;Form Name&gt;</code> element.</li> <li> <p>Click <code>frmContactUs</code>. By doing this, when you click the newly added widget on the <code>frmStore</code> form, the <code>frmContactUs</code> form appears.</p> <p>You can build or preview the EAS App to view the customized results now.</p> </li> </ol> </li> </ol>"},{"location":"EAS_NativeApp_Walk-through/#modifying-server-eas-app-for-identity-services-and-metadata-of-binaries","title":"Modifying Server EAS App for Identity Services and Metadata of Binaries","text":""},{"location":"EAS_NativeApp_Walk-through/#configuring-identity-services-for-eas-authentication","title":"Configuring Identity Services for EAS Authentication","text":"<p>You can configure new Identity Services and Object Services for EAS in the Volt MX App Store App. After you configure the new services, you must map the new services in the project and update the source code of the Store project.</p>"},{"location":"EAS_NativeApp_Walk-through/#configuring-properties-for-client-binaries","title":"Configuring Properties for Client Binaries","text":"<p>For information on how to configure basic properties such as the description of a client binary file, the icon of a binary, and the related screenshots of a binary file. refer to Configuring Properties for Client Binaries in VoltMX Foundry.</p>"},{"location":"EAS_NativeApp_Walk-through/#publishing-eas-app","title":"Publishing EAS App","text":"<p>EAS native apps need to be distributed in the same way as you distribute the other native apps. So, to distribute EAS native apps to end-users, you must publish your EAS native apps to the EAS Web app. End-users can access the EAS Web app to view and download EAS native apps on devices like any other native apps. By default, the EAS Web app is selected while publishing the apps to EAS.</p>"},{"location":"EAS_NativeApp_Walk-through/#build-and-publish-app-binaries-to-eas-using-volt-mx-iris","title":"Build and Publish App Binaries to EAS using Volt MX Iris","text":"<p>With Iris Starter, you can build client binaries and publish them directly to Volt MX App Server from Iris. For more information, refer to Publishing Native Apps to Enterprise App Store from Iris Starter.</p> <ul> <li>For more information on how to build app binaries and publish them to EAS, refer to Publish to Enterprise App Store section in Publishing Client Binaries to Volt MX App Server from Volt MX Iris (for Cloud only).</li> </ul>"},{"location":"EAS_NativeApp_Walk-through/#publish-app-binaries-to-eas-using-volt-mx-foundry","title":"Publish App Binaries to EAS using Volt MX Foundry","text":"<p>By using Volt MX Foundry, you can upload the client binaries and publish them to Volt MX App Server. After an app is published to Volt MX App Server, an authorized end-user can access the EAS Client app to view the available applications and download them using a mobile device.</p> <ul> <li>For more information on how to upload app binaries to the Server and publish them to EAS by using Volt MX Foundry, refer to Publishing Client Binaries to Volt MX App Server from Volt MX Foundry.</li> </ul>"},{"location":"about/","title":"About Version Switch","text":""},{"location":"about/#content-1","title":"content-1","text":""},{"location":"about/#content-2","title":"content-2","text":""},{"location":"about/#content-3","title":"content-3","text":""},{"location":"about/#content-4-old","title":"content-4 --&gt; Old","text":""},{"location":"about/#content-5","title":"content-5","text":""},{"location":"about/#content-6","title":"content-6","text":""},{"location":"about/#content-7","title":"content-7","text":""}]}